---
title: "Title"
author: "Elizna Maasdorp"
date: "`r format(Sys.time(), '%d %B, %Y')`"
format: 
  html:
    embed-resources: true
    page-layout: full
    fig-width: 24
    fig-height: 18
editor: source
editor_options: 
  chunk_output_type: console
execute: 
  echo: true
  warning: false
  error: false
---

# Overview

```{r}
#| echo: false

library(knitr)
library(kableExtra)
library(tidyverse)
library(GEOquery)
library(furrr)
library(tictoc)
library(conflicted)

conflicts_prefer(dplyr::select(),
                 dplyr::filter(),
                 dplyr::rename(),
                 Biobase::combine()
                 )

# colours

# themeCols <- tibble(hex3 = c("#47e5bc", "#F54E56", "#FFA90B"),
#                     hex7 = c("#47e5bc", "#F54E56", "#FFA90B",
#                              "#6AECF0", "#293241", "#716F66", "#790600" ),
#                     hex4 = c("#dd1155", "#FAD711", "#0CEE84",  "#5F0030"),
#                     hex5 = c("#084c61", "#db504a", "#F8CB15", "#72BAB4", 
#                              "#30454E"))


# ggplot theme

chapTheme <- theme_classic() + 
  theme(text = element_text(color = "grey30",
                            size = 18),
        line = element_line(color = "grey30", linewidth = 0.25),
        rect = element_rect(color = "grey30", linewidth = 0.25),
        panel.background = element_rect(colour = "grey70", linewidth = 2),
        axis.line = element_blank(),
        axis.ticks = element_blank(),
        strip.background = element_rect(colour = "grey70",
                                        linewidth = 0.25),
        strip.text = element_text(colour = "grey30"))

theme_set(chapTheme)


```

```{r}
# from hemera
pheno <- read_rds("pheno.rds")

sort(unique(pheno$key))

pheno %>% 
  count(geo_accession, geo_set)

pheno %>% 
  distinct(geo_set, key) %>% 
  count(key) %>% 
  arrange(desc(n)) %>% 
  print(n = Inf)

```

Sort out "characteristics_*"  

```{r}

tmp <- pheno %>% 
  filter(str_detect(key, "character")) %>% 
  distinct(value) %>% 
  separate(value, into = c("key2", "value2"), sep = ":", remove = FALSE) %>% 
  distinct(key2) %>% 
  arrange(key2) %>% 
  print(n = Inf)



```

Leave out for now, then add afterwards, only the ones NOT in the list


# Key

Manually put together the terms that seem to be the same thing. Make list.

```{r}
x <- pheno %>% 
  distinct(geo_set, key) %>% 
  count(key) %>% 
  arrange(key) %>% 
  print(n = Inf) %>% 
  pull(key)

ll <- list()
# age
ll$age <- x[str_detect(x, "age") & !str_detect(x, "agent") & !str_detect(x, "stage")]

# art
ll$art <- x[str_detect(x, "retroviral")]


# bronchs

ll$bronch <- x[str_detect(x, "bal")]

# bcg

ll$bcg <- x[str_detect(x, "bcg")]


# case or control
ll$case_control <- x[str_detect(x, "case or")]

# cell type

ll$cell_type <- x[str_detect(x, "cell") & !str_detect(x, "flowcell") &
    !str_detect(x, "number of")]


# clinical_dx

ll$clin_dx <- c(x[str_detect(x, "clinical")],
                x[str_detect(x, "diagnos") & !str_detect(x, "previous")],
                x[str_detect(x, "disease") & !str_detect(x, "duration")],
                x[str_detect(x, "distinct stages of tb")],
                x[str_detect(x, "eptborptb")],
                x[str_detect(x, "etiology")],
                x[str_detect(x, "healthy")],
                x[str_detect(x, "illness")],
                x[str_detect(x, "phenotype")],
                x[str_detect(x, "tb status")],
                x[str_detect(x, "tb-status")],
                
                x[str_detect(x, "latent tb")],
                x[str_detect(x, "infection") & !str_detect(x, "time")],
                x[str_detect(x, "exposure") & !str_detect(x, "time.from")],
                x[str_detect(x, "condition") &
                                    !str_detect(x, "incubation") &
    !str_detect(x, "stimulation")])


# culture

ll$culture <- c(x[str_detect(x, "culture")], x[str_detect(x, "mgit")])

# time / days

ll$timepoint <- c(x[str_detect(x, "days")], 
                  x[str_detect(x, "time") & !str_detect(x, "negativity")])


# sex

ll$sex <- c(x[str_detect(x, "gender")], x[str_detect(x, "sex")])

# geographical_region
ll$geographical_region <- c(x[str_detect(x,"birth_place")], x[str_detect(x, "geographical")],
                            x[str_detect(x, "recruiting")])


pheno %>% 
  filter(str_detect(key, "type")) %>% 
  distinct(key, value) %>% 
  print(n = Inf)

x

# hiv

ll$hiv <- x[str_detect(x, "hiv")]

# igra
ll$igra <- c(x[str_detect(x, "igra")], x[str_detect(x, "qft")], x[str_detect(x, "quanti")])


# instrument

ll$instrument <- x[str_detect(x, "instrument")]

# molecule

ll$molecule <- x[str_detect(x, "molecule")]

# organism

ll$organism <- x[str_detect(x, "organism")]


# prev tb

ll$prev_tb <- x[str_detect(x, "previous")]

# sample type

ll$sample_type <- c(x[str_detect(x, "sample") & str_detect(x, "type")], 
  x[str_detect(x, "source_name")],
    x[str_detect(x, "tissue")]) 



# smear
ll$smear <- x[str_detect(x, "smear")]

 # tspot
ll$tspot <- x[str_detect(x, "tspot")]
 
 
 # tst
 
ll$tst <- c(x[str_detect(x, "tst")], x[str_detect(x, "tuberculin skin test")]) 
 
 
 # xpert
 
ll$xpert <- x[str_detect(x, "xpert")]
 
```


```{r}
pheno
length(ll)

tibble(key = ll[[22]]) %>% 
  left_join(pheno) %>% 
  select(geo_set, key, value) %>% 
  distinct() %>% 
  print(n = Inf)
  
# add column to ll with the variable name from database




```







































```{r}
terms_experi <- tibble(x = c("experimentData|PMIDs|pmid_nr|yyyy")) %>% 
  separate(x, into = c("dataset", "term", "sql_name", "sql_table"), sep = "\\|")

terms_pheno <- tibble(x = c(
           "phenoData|clinical information|xxxxx|TBdata_clin",
           "phenoData|contact_email|contact_email|TBdata_meta_char",
           "phenoData|contact_name|corr_author|yyyy",
           "phenoData|disease state|disease_state|yyyy",
           "phenoData|extract_protocol|xxxxxx|yyyy",
           "phenoData|group|xxxxxx|yyyyy",
           "phenoData|instrument_model|sequencing_platform|yyyyy",
           "phenoData|library_strategy|xxxxx|yyyyy",
           "phenoData|mgit|xxxxxx|yyyyy",
           "phenoData|molecule|xxxxxx|yyyyy",
           "phenoData|organism|xxxxxx|yyyyy",
         
           "phenoData|sample_code|xxxxxx|yyyyy",
           "phenoData|source_name|sample_type|yyyyy",
           "phenoData|subject|xxxxx|yyyyy",
           "phenoData|time:|xxxxxx|yyyyy",
           "phenoData|timetonegativity|xxxxxx|yyyyy",
           "phenoData|tissue|xxxxx|yyyyy",
           "phenoData|treatmentresult|xxxxxx|yyyyy",
           "phenoData|xpert|xxxxxx|yyyyy")) %>% 
  separate(x, into = c("dataset", "term", "sql_name", "sql_table"), sep = "\\|")
 
tic()     
info_list <- future_map(terms$term,
                        ~pheno %>% 
  filter(str_detect(key, .x) | 
           str_detect(value, .x)) %>% 
  distinct())
toc() # 5 secs

names(info_list) <- terms$term

info_list




```


